### Glossary ###
1. generic type = type (class) with type parameters
2. parameterized type = an instantiation of a generic type with actual type arguments
3. type parameter <T> = a placeholder that will be later replaced by type argument
4. raw type = a generic type without type parameters Eg. GenericClassExample instead of GenericClassExample<T,U>
5. bound type = type parameter replaced after type erasure with a class/interface that was defined as super type for the type parameter
6. unbound type = type parameter replaced after type erasure with Object


### Restrictions and limitations ###

1. Primitive types are not allowed as type parameters because of type erasure.
   After type erasure, the class has a fields of type object (or bound type if present), which cannot be used to store primitives.

2. Casts, instanceof and getClass() will return/can be used with only raw types.
   (GenericClassExample<String,Integer>.getClass(); instanceof MyGenericType<String>; (MyGenericType<String>)genericObj will throw compilation error).
   Also GenericClassExample.getClass() will return raw type (GenericClassExample) even if it was declared with type parameters.

3. Objects of a generic class cannot be thrown nor caught. Generic classes cannot even extend Throwable (but the type parameter can).
   Even though you cannot use a type variable in the catch clause, it is allowed to use it in the catch body.
   Even tough it is not allowed to throw generic class objects, it is allowed to use type variables in exception specification.

    public static <T extends Throwable> void doWork(T t) throws T // OK
    {
       try
       {
          do work
       }
       catch (Throwable realCause)
       {
          t.initCause(realCause);
          throw t;
       }
    }

4. We cannot declare arrays of generic class (GenericClassExample<String,Integer>[] test = new GenericClassExample<String,Integer>[3] does not work),
   because after type erasure and converting the array to an Object[] array, putting a GenericClassExample<String> into GenericClassExample<Integer>[] array will result in an error.
   However GenericClassExample<String,Integer>[] test = new GenericClassExample[3]; will work, and we will get a compilation error if we put an object with different type parameters.

5. Instantiation of generic parameter types is not possible.
   public GenericClassExample() { first = new T(); second = new T(); } // ERROR
   Instantiation of arrays of generic parameter types is not possible.
   T[] mm = new T[2]; // ERROR
Generic parameter objects and arrays can be instantiated through reflection (Class.newInstance and Array.newInstance methods).

6. You cannot reference type variables in static fields or methods. Take the case of a singleton. If we try to make 2 objects of the generic class with different type parameters,
   there will be only one instance. What type will be used ? However a static method can use type parameters declared at method level
   (public static <T> T doSomething(){} - <T> should be declared before return type).
7. You cannot instantiate generic type parameter or make an array of it (new T() or T[] myTArray = new T[3] will not work).
   However, you can construct generic objects and arrays through reflection, by calling the Class.newInstance and Array.newInstance methods

8. Pay attention to inherited methods after  type erasure. It is not allowed to create conditions that clash after the type is erased.
   Consider GenericClassExample<String>. if we override equals , after type erasure there will be 2 methods with same signature which is illegal. the remedy is to rename the method.
   Also a generic class cannot implement the same interface twice but with different parameters (different parameterizations of the same interface).


### Inheritance rules ###

There is no relationship between GenericClassExample<T> and GenericClassExample<U> no matter how T and U are related. It is illegal to assign one to the other.
You can convert a generic type to a raw type, but pay attention to ClassCastException. You will get a compile time warning when trying to set a type parameter.
Generic classes can extend or implement other generic classes. They are no different from ordinary classes. Eg. ArrayList<T> implements List<T>


### Wildcard types ###
Wild card types help make generics more flexible. They are not used in the generic type definition (class Generic<? extends Serializable>; method/field declaration is not working,
however  GenericClassExample<T extends Comparable<? super Object>> works).
They are used only as reference parameters (in the caller class). After defining the reference with wildcard, a distinction arises between subtype and supertype wildcard bounds when it comes
to passing them as parameters to methods and use them as return values.

1. Upper bounded wildcard (? extends Employee) - only subtype of Employee or Employee in our case can be used when constructing our parameterized type.
   You cannot supply parameters to methods, but you can use the return values. You can use to get values only references from up the inheritance tree.
   We cannot pass the type parameter reference after this (through setter for example) by putting another Employee or subtype. The compiler will complain because it does not know which
   subtype implementation is receiving. Getting the value however is possible and can be assigned to a Employee reference or supertype.
2. Lower bounded wildcard (? super Employee) - only supertype of Employee in our case can be used when constructing our parameterized type.
   You can supply parameters to methods, but you can't use the return values. You can supply references from down the inheritance tree.
   We can pass the type parameter reference after this (through setter for example) by putting another Employee or subtype of Employee. The compiler will not complain
   because the reference is a subtype. Getting the value and assign it to a reference however is not possible because the actual implementation can vary. We can however get the value
   and assign it to a Object reference (it is the supertype), or with the help of explicit cast to another reference.
3. Unbounded wildcards (<?>) -  cannot supply parameters after creation (not even Object type) and can be assigned only to Object reference.
   Useful when the code in the generic class does not depend on the type parameter or if we write methods that depend on methods from Object. It is used mostly for very generic methods.





